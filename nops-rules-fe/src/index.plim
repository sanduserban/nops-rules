- namespace name="defs" defs.plim
---!
    import addict
    import os

    WIDTHS = [8120, 5260, 3840, 2560, 1920, 1280, 1024, 768, 640, 320]


    API_PREFIX = os.getenv("API_PREFIX") or "/api"

    def srcset(image, ext, maxwidth=8120, factor=1):
        return ','.join(f'/static/img/{image}/{width}_{image}.{ext} {int(round(width * factor))}w' for width in WIDTHS if width <= maxwidth)

    class CLS:
        th = "px-2 py-3 md:px-6 md:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"

        def circle(color, size=3):
            return f"rounded-full h-{size} w-{size} bg-{color} inline-block mr-3"

        def tag(color, size="xs"):
            return f"px-2 my-1 inline-flex text-{size} leading-5 font-semibold rounded-full bg-{color}-100 text-{color}-800 transition hover:bg-{color}-200 hover:text-{color}-900 hover:shadow cursor-pointer"

    DATA = addict.Dict({
            "aws": {
                "ec2": {
                    "check_ec2_autoscaling": {
                        "breadcrumbTitle": "EC2 Autoscaling",
                        "description": "Consider leveraging autoscaling for high availability and lower cost",
                        "name": "Autoscaling disabled for EC2 instances\"",
                        "pillar": "Reliability",
                        "service": "ec2",
                        "tags": [
                            "AWS",
                            "FTR",
                            "WAFR"
                        ],
                        "title": "Resources are part of autoscaling groups"
                    },
                    "ec2_low_network_utilization": {
                        "breadcrumbTitle": "EC2 low network traffic",
                        "description": "Some description",
                        "name": "EC2 low network traffic details",
                        "pillar": "Cost",
                        "service": "ec2",
                        "tags": [
                            "AWS",
                            "FTR",
                            "WAFR"
                        ],
                        "title": "EC2 Low Network Traffic details"
                    }
                },
                "rds": {
                    "rds_instances_without_multiaz": {
                        "breadcrumbTitle": "EC2 Autoscaling",
                        "description": "RDS instances are enabled for Multi-AZ. It provides high availability to quickly and automatically recover from infrastructure failures.",
                        "name": "Enable Multi-AZ for RDS",
                        "pillar": "Reliability",
                        "service": "rds",
                        "tags": [
                            "AWS",
                            "FTR",
                            "WAFR"
                        ],
                        "title": "Resources are part of autoscaling groups"
                    }
                }
            },
            "gcp": {
                "gcp_service": {
                    "some_gcp_rule": {
                        "breadcrumbTitle": "gcp breadcrump",
                        "description": "gcp description",
                        "name": "gcp",
                        "pillar": "Reliability",
                        "service": "gcp_service",
                        "tags": [
                            "GCP"
                        ],
                        "title": "GCP Title"
                    }
                }
            }
        })


doctype html
html lang="en"
    head
        - call title="nOps" domain="nops.netlify.app" description="No more Ops" short_description="No more Ops" defs:head

    body.flex.flex-col.flex-center
        .flex.flex-col.flex-center.w-screen.${'md:w-[90vw]'}
            h1.font-extrabold.text-6xl.text-mauve-lightgray.pt-[5vh].pb-4 nOps
            h6.font-medium.text-gray-500.pb-[5vh] no more ops, we'll handle that
            -def row(data)
                tr
                    td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap
                        .flex.flex-col.max-w-[200px].${'md:max-w-max'}
                            .text-sm.font-medium.text-gray-900.whitespace-pre-wrap.mb-1
                                | ${data.name}
                            .text-sm.text-gray-500.whitespace-pre-wrap
                                | ${data.description}
                    td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap.max-w-[200px].${'md:max-w-max'}
                        .text-sm.text-gray-900.whitespace-pre-wrap.mb-1 ${data.title}
                        .text-sm.text-gray-500.whitespace-pre-wrap ${data.pillar}
                    td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap.flex.flex-wrap.max-w-[150px]
                        -for tag in data.tags
                            span.${CLS.tag("green" if tag == "AWS" else "red")}
                                | ${tag}

                    td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap.text-sm.text-gray-500.max-w-[120px]
                        | ${data.service}

            h2.font-extrabold.font-sans.text-2xl.${'md:text-4xl'}.text-mauve-gray.ml-4.pt-[5vh].pb-4.self-start Amazon Web Services
            .-my-2.overflow-x-auto.${'sm:-mx-6'}.${'lg:-mx-8'}.w-full
                .py-2.align-middle.inline-block.min-w-full.${'md:px-6'}.${'lg:px-8'}
                    .shadow.overflow-hidden.border-b.border-gray-200.${'sm:rounded-lg'}
                        table.divide-y.divide-gray-200.w-full
                            thead.bg-gray-50
                                tr
                                    th.${CLS.th} scope="col" Name
                                    th.${CLS.th} scope="col" Title
                                    th.${CLS.th} scope="col" Tags
                                    th.${CLS.th} scope="col" Service
                            tbody.bg-white.divide-y.divide-gray-200
                                -call data=${DATA.aws.ec2.ec2_low_network_utilization} self:row
                                -call data=${DATA.aws.ec2.check_ec2_autoscaling} self:row
                                -call data=${DATA.aws.rds.rds_instances_without_multiaz} self:row

            h2.font-extrabold.font-sans.text-2xl.${'md:text-4xl'}.text-mauve-gray.ml-4.pt-[5vh].pb-4.self-start Google Cloud Platform
            .-my-2.overflow-x-auto.${'sm:-mx-6'}.${'lg:-mx-8'}.w-full
                .py-2.align-middle.inline-block.min-w-full.${'md:px-6'}.${'lg:px-8'}
                    .shadow.overflow-hidden.border-b.border-gray-200.${'sm:rounded-lg'}
                        table.divide-y.divide-gray-200.w-full
                            thead.bg-gray-50
                                tr
                                    th.${CLS.th} scope="col" Name
                                    th.${CLS.th} scope="col" Title
                                    th.${CLS.th} scope="col" Tags
                                    th.${CLS.th} scope="col" Service
                            tbody.bg-white.divide-y.divide-gray-200
                                -call data=${DATA.gcp.gcp_service.some_gcp_rule} self:row
        -coffee
            loadRules = () ->
              response = await fetch '${API_PREFIX}/'
              rules = await response.json()

              console.log(rules)

            loadRules()